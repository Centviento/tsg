/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package tsg.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import tsg.model.FlatOwner;
import tsg.model.FlatOwnerModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the FlatOwner service. Represents a row in the &quot;tsg_FlatOwner&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link tsg.model.FlatOwnerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FlatOwnerImpl}.
 * </p>
 *
 * @author Whitemonk
 * @see FlatOwnerImpl
 * @see tsg.model.FlatOwner
 * @see tsg.model.FlatOwnerModel
 * @generated
 */
public class FlatOwnerModelImpl extends BaseModelImpl<FlatOwner>
	implements FlatOwnerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a flat owner model instance should use the {@link tsg.model.FlatOwner} interface instead.
	 */
	public static final String TABLE_NAME = "tsg_FlatOwner";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "ownerId", Types.BIGINT },
			{ "tsgId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "flatId", Types.BIGINT },
			{ "fromDate", Types.TIMESTAMP },
			{ "toDate", Types.TIMESTAMP },
			{ "percent", Types.INTEGER },
			{ "area", Types.INTEGER },
			{ "shared", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table tsg_FlatOwner (id_ LONG not null primary key,ownerId LONG,tsgId LONG,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,flatId LONG,fromDate DATE null,toDate DATE null,percent INTEGER,area INTEGER,shared BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table tsg_FlatOwner";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.tsg.model.FlatOwner"), true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.tsg.model.FlatOwner"), true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.tsg.model.FlatOwner"), true);
	public static long OWNERID_COLUMN_BITMASK = 1L;
	public static long TSGID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.tsg.model.FlatOwner"));

	public FlatOwnerModelImpl() {
	}

	public long getPrimaryKey() {
		return _id;
	}

	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_id);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return FlatOwner.class;
	}

	public String getModelClassName() {
		return FlatOwner.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("ownerId", getOwnerId());
		attributes.put("tsgId", getTsgId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("flatId", getFlatId());
		attributes.put("fromDate", getFromDate());
		attributes.put("toDate", getToDate());
		attributes.put("percent", getPercent());
		attributes.put("area", getArea());
		attributes.put("shared", getShared());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		Long ownerId = (Long)attributes.get("ownerId");

		if (ownerId != null) {
			setOwnerId(ownerId);
		}

		Long tsgId = (Long)attributes.get("tsgId");

		if (tsgId != null) {
			setTsgId(tsgId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long flatId = (Long)attributes.get("flatId");

		if (flatId != null) {
			setFlatId(flatId);
		}

		Date fromDate = (Date)attributes.get("fromDate");

		if (fromDate != null) {
			setFromDate(fromDate);
		}

		Date toDate = (Date)attributes.get("toDate");

		if (toDate != null) {
			setToDate(toDate);
		}

		Integer percent = (Integer)attributes.get("percent");

		if (percent != null) {
			setPercent(percent);
		}

		Integer area = (Integer)attributes.get("area");

		if (area != null) {
			setArea(area);
		}

		Boolean shared = (Boolean)attributes.get("shared");

		if (shared != null) {
			setShared(shared);
		}
	}

	public long getId() {
		return _id;
	}

	public void setId(long id) {
		_id = id;
	}

	public long getOwnerId() {
		return _ownerId;
	}

	public void setOwnerId(long ownerId) {
		_columnBitmask |= OWNERID_COLUMN_BITMASK;

		if (!_setOriginalOwnerId) {
			_setOriginalOwnerId = true;

			_originalOwnerId = _ownerId;
		}

		_ownerId = ownerId;
	}

	public long getOriginalOwnerId() {
		return _originalOwnerId;
	}

	public long getTsgId() {
		return _tsgId;
	}

	public void setTsgId(long tsgId) {
		_columnBitmask |= TSGID_COLUMN_BITMASK;

		if (!_setOriginalTsgId) {
			_setOriginalTsgId = true;

			_originalTsgId = _tsgId;
		}

		_tsgId = tsgId;
	}

	public long getOriginalTsgId() {
		return _originalTsgId;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getFlatId() {
		return _flatId;
	}

	public void setFlatId(long flatId) {
		_flatId = flatId;
	}

	public Date getFromDate() {
		return _fromDate;
	}

	public void setFromDate(Date fromDate) {
		_fromDate = fromDate;
	}

	public Date getToDate() {
		return _toDate;
	}

	public void setToDate(Date toDate) {
		_toDate = toDate;
	}

	public int getPercent() {
		return _percent;
	}

	public void setPercent(int percent) {
		_percent = percent;
	}

	public int getArea() {
		return _area;
	}

	public void setArea(int area) {
		_area = area;
	}

	public boolean getShared() {
		return _shared;
	}

	public boolean isShared() {
		return _shared;
	}

	public void setShared(boolean shared) {
		_shared = shared;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			FlatOwner.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FlatOwner toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (FlatOwner)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	public FlatOwner toUnescapedModel() {
		return (FlatOwner)this;
	}

	@Override
	public Object clone() {
		FlatOwnerImpl flatOwnerImpl = new FlatOwnerImpl();

		flatOwnerImpl.setId(getId());
		flatOwnerImpl.setOwnerId(getOwnerId());
		flatOwnerImpl.setTsgId(getTsgId());
		flatOwnerImpl.setCompanyId(getCompanyId());
		flatOwnerImpl.setUserId(getUserId());
		flatOwnerImpl.setCreateDate(getCreateDate());
		flatOwnerImpl.setModifiedDate(getModifiedDate());
		flatOwnerImpl.setFlatId(getFlatId());
		flatOwnerImpl.setFromDate(getFromDate());
		flatOwnerImpl.setToDate(getToDate());
		flatOwnerImpl.setPercent(getPercent());
		flatOwnerImpl.setArea(getArea());
		flatOwnerImpl.setShared(getShared());

		flatOwnerImpl.resetOriginalValues();

		return flatOwnerImpl;
	}

	public int compareTo(FlatOwner flatOwner) {
		long primaryKey = flatOwner.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof FlatOwner)) {
			return false;
		}

		FlatOwner flatOwner = (FlatOwner)obj;

		long primaryKey = flatOwner.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		FlatOwnerModelImpl flatOwnerModelImpl = this;

		flatOwnerModelImpl._originalOwnerId = flatOwnerModelImpl._ownerId;

		flatOwnerModelImpl._setOriginalOwnerId = false;

		flatOwnerModelImpl._originalTsgId = flatOwnerModelImpl._tsgId;

		flatOwnerModelImpl._setOriginalTsgId = false;

		flatOwnerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<FlatOwner> toCacheModel() {
		FlatOwnerCacheModel flatOwnerCacheModel = new FlatOwnerCacheModel();

		flatOwnerCacheModel.id = getId();

		flatOwnerCacheModel.ownerId = getOwnerId();

		flatOwnerCacheModel.tsgId = getTsgId();

		flatOwnerCacheModel.companyId = getCompanyId();

		flatOwnerCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			flatOwnerCacheModel.createDate = createDate.getTime();
		}
		else {
			flatOwnerCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			flatOwnerCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			flatOwnerCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		flatOwnerCacheModel.flatId = getFlatId();

		Date fromDate = getFromDate();

		if (fromDate != null) {
			flatOwnerCacheModel.fromDate = fromDate.getTime();
		}
		else {
			flatOwnerCacheModel.fromDate = Long.MIN_VALUE;
		}

		Date toDate = getToDate();

		if (toDate != null) {
			flatOwnerCacheModel.toDate = toDate.getTime();
		}
		else {
			flatOwnerCacheModel.toDate = Long.MIN_VALUE;
		}

		flatOwnerCacheModel.percent = getPercent();

		flatOwnerCacheModel.area = getArea();

		flatOwnerCacheModel.shared = getShared();

		return flatOwnerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", ownerId=");
		sb.append(getOwnerId());
		sb.append(", tsgId=");
		sb.append(getTsgId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", flatId=");
		sb.append(getFlatId());
		sb.append(", fromDate=");
		sb.append(getFromDate());
		sb.append(", toDate=");
		sb.append(getToDate());
		sb.append(", percent=");
		sb.append(getPercent());
		sb.append(", area=");
		sb.append(getArea());
		sb.append(", shared=");
		sb.append(getShared());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("tsg.model.FlatOwner");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ownerId</column-name><column-value><![CDATA[");
		sb.append(getOwnerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tsgId</column-name><column-value><![CDATA[");
		sb.append(getTsgId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>flatId</column-name><column-value><![CDATA[");
		sb.append(getFlatId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromDate</column-name><column-value><![CDATA[");
		sb.append(getFromDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>toDate</column-name><column-value><![CDATA[");
		sb.append(getToDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>percent</column-name><column-value><![CDATA[");
		sb.append(getPercent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>area</column-name><column-value><![CDATA[");
		sb.append(getArea());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>shared</column-name><column-value><![CDATA[");
		sb.append(getShared());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = FlatOwner.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			FlatOwner.class
		};
	private long _id;
	private long _ownerId;
	private long _originalOwnerId;
	private boolean _setOriginalOwnerId;
	private long _tsgId;
	private long _originalTsgId;
	private boolean _setOriginalTsgId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private long _flatId;
	private Date _fromDate;
	private Date _toDate;
	private int _percent;
	private int _area;
	private boolean _shared;
	private long _columnBitmask;
	private FlatOwner _escapedModel;
}